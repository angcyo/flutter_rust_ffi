/*! \file */
/*******************************************
 *                                         *
 *  File auto-generated by `::safer_ffi`.  *
 *                                         *
 *  Do not manually edit this file.        *
 *                                         *
 *******************************************/

#ifndef __RUST_RUST_API_TEST__
#define __RUST_RUST_API_TEST__
#ifdef __cplusplus
extern "C" {
#endif


#include <stdbool.h>

/** \brief
 *
 *  @author <a href="mailto:angcyo@126.com">angcyo</a>
 *  @date 2024-08-17
 *
 *  测试布尔类型的参数传输
 *  @return 取反
 */
bool
test_bool (
    bool value);


#include <stddef.h>
#include <stdint.h>

/** \brief
 *  Same as [`Vec<T>`][`rust::Vec`], but with guaranteed `#[repr(C)]` layout
 */
typedef struct Vec_uint8 {
    /** <No documentation available> */
    uint8_t * ptr;

    /** <No documentation available> */
    size_t len;

    /** <No documentation available> */
    size_t cap;
} Vec_uint8_t;

/** \brief
 *  测试字节类型的参数传输
 */
Vec_uint8_t
test_bytes (
    Vec_uint8_t const * value);

/** \brief
 *  测试双精度浮点类型的参数传输
 */
double
test_double (
    double value);

/** \brief
 *  测试浮点类型的参数传输
 */
float
test_float (
    float value);

/** \brief
 *  测试整数类型的参数传输
 */
int32_t
test_int (
    int32_t value);

/** \brief
 *  测试字符串类型的参数传输
 */
Vec_uint8_t
test_string (
    Vec_uint8_t const * value);


#ifdef __cplusplus
} /* extern \"C\" */
#endif

#endif /* __RUST_RUST_API_TEST__ */
